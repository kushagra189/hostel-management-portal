#+TITLE: Hostel-Management-Portal 2
#+TEAM MEMBERS: Anurag Mehta(20161016), Kushagra Nagori(20161032), Amatya(20161017), Akshat Maheshwari(20161024)

* Goals
To implement a Web portal for Students living in Hostels.
* Features
** 2 types of Users:
*** Students
*** Hostel Admins
** Users need to register themselves, and are also verified by the Hostel Admin
** Some user details like name, room, year, etc. are public while other details are only available to the hostel admins.
** Users can submit queries/complaints regarding Hostel facilities.
** Peer rating system for ranking the members of the hostel.
* Application Structure
  
      *Hostel-Management-Portal-2*
      |
      +-----hostel
            |
	    +-----boilerplate
	          |
		  +-----app
		        |
			+-----admin
			|
			+-----report
			|
			+-----static
			|
			+-----templates
			|
			+-----user
		  
* Implementation
** Flask
This project of pastebin has been implemented using Flask. Flask is called a micro framework because it does not require particular tools or libraries. 
It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions. 
However, Flask supports extensions that can add application features as if they were implemented in Flask itself. Extensions exist for object-relational mappers, 
form validation, upload handling, various open authentication technologies and several common framework related tools. Extensions are updated far more regularly 
than the core Flask program. 

*** Contains development server and debugger
*** Uses *Jinja2* templating
*** *RESTful* request dispatching
*** Example
**** A simple web application to print “Hello World!”
#+BEGIN_SRC python
from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello World!"

if __name__ == "__main__":
    app.run()
#+END_SRC

*** Official *Flask documentation* [[http://flask.pocoo.org/docs/0.12/][here]].
*** Backend
Our project supports 2 types of users:
    1. Users
    2. Admin   
** Tables
*** regUser

+--------------------+--------------------+--------------------+
|     FIELD          |      TYPE          |    CONSTRAINTS     |
+--------------------+--------------------+--------------------+
|     EMAIL          |      str           |     UNIQUE         |
+--------------------+--------------------+--------------------+
|   PASSWORD         |      str           |     NON-NULL       |
+--------------------+--------------------+--------------------+
|     NAME           |      str           |    NON-NULL        |
+--------------------+--------------------+--------------------+
|   ROLL NO          |      int           |    PRIMARY         |
+--------------------+--------------------+--------------------+
|    HOSTEL          |      str           |    NON-NULL        |
+--------------------+--------------------+--------------------+
|    ROOM            |      str           |    NON-NULL        |
+--------------------+--------------------+--------------------+
|   CONTACT          |      int           |    NON-NULL        |
+--------------------+--------------------+--------------------+
| GUARDIAN ADDRESS   |      str           |    NON-NULL        |
+--------------------+--------------------+--------------------+
| GUARDIAN CONTACT   |      int           |    NON-NULL        |
+--------------------+--------------------+--------------------+
|    STATUS          |      int           |    DEFAULT = 0     |
+--------------------+--------------------+--------------------+

**** The =regUser= table is the initial table in which the data of each newly registered user is stored.
**** The contents of this table are visible only to the admin.
***** The user in the regUser table verified by the admin, only when he/she is part of the hostel.
**** The password entered as a string is stored as a hash, but is not visible to the admin.
**** The status is 1 if admin verifies, and is 2 if the admin rejects the user.
*** verUser

+--------------------+--------------------+--------------------+
|     FIELD          |      TYPE          |    CONSTRAINTS     |
+--------------------+--------------------+--------------------+
|     EMAIL          |      str           |      UNIQUE        |
+--------------------+--------------------+--------------------+
|   PASSWORD         |      str           |      NON-NULL      |
+--------------------+--------------------+--------------------+
|     NAME           |      str           |      NON-NULL      |
+--------------------+--------------------+--------------------+
|   ROLL NO          |      int           |      NON-NULL      |
+--------------------+--------------------+--------------------+
|    HOSTEL          |      str           |      NON-NULL      |
+--------------------+--------------------+--------------------+
|     ROOM           |      str           |      NON-NULL      |
+--------------------+--------------------+--------------------+
|   CONTACT          |      int           |      NON-NULL      |
+--------------------+--------------------+--------------------+
|    RATING          |      int           |     DEFAULT = 0    |
+--------------------+--------------------+--------------------+
| GUARDIAN ADDRESS   |      str           |      NON-NULL      |
+--------------------+--------------------+--------------------+
| GUARDIAN CONTACT   |      int           |      NON-NULL      |
+--------------------+--------------------+--------------------+
|    STATUS          |      int           |      FIXED = 1     |
+--------------------+--------------------+--------------------+
|  AUTHENTICATED     |      bool          |   DEFAULT = FALSE  |
+--------------------+--------------------+--------------------+

**** The =verUser= table consists of all the entries that have been verified by the admin and have status as 1.
**** The contents of this table are visible both to the admin and to the other verified users.
**** The admin can also see the personal information of the verified users, but the other verified users can see only a limited part of the information.
**** The rating of a particular user is the average of the total ratings given by every other user out of 5.
**** The status here is fixed, i.e. for the verified user, it is 1.
*** Rating

+--------------------+--------------------+--------------------+
|     FIELD          |      TYPE          |     CONSTRAINT     |
+--------------------+--------------------+--------------------+
|    USER ROLL       |      int           |    FOREIGN KEY     |
+--------------------+--------------------+--------------------+
|    RATER ROLL      |      int           |    FOREIGN KEY     |
+--------------------+--------------------+--------------------+
|     RATING         |      int           |    DEFAULT = 0     |
+--------------------+--------------------+--------------------+
|      KEY           |      big int       |      UNIQUE        |
+--------------------+--------------------+--------------------+

**** The =Rating= table consists of the average ratings given by all the users to a particular user.
**** The rating is given to the user having roll no as /user roll/ and the /rater roll/ is taken from the session.
**** The /rating/ column stores the average rating of a particular user.
**** The key is stored as a hash and is unique, which checks that a person can rate every other person only once.
*** Admin

+--------------------+--------------------+--------------------+
|      FIELD         |       TYPE         |    CONSTRAINTS     |
+--------------------+--------------------+--------------------+
|      NAME          |       str          |     NON-NULL       |
+--------------------+--------------------+--------------------+
|      EMAIL         |       str          |     UNIQUE         |
+--------------------+--------------------+--------------------+
|     PASSWORD       |       str          |     NON-NULL       |
+--------------------+--------------------+--------------------+
**** The Admin table stores all the admins.
**** The /email/ is taken as the unique key as no two admins can have the same email.
**** Password is entered as a string and is stored as a hash.
*** Report

+--------------------+--------------------+--------------------+
|      FIELD         |      TYPE          |    CONSTRAINTS     |
+--------------------+--------------------+--------------------+
|      ROLL          |      int           |     NON-NULL       |
+--------------------+--------------------+--------------------+
|     TITLE          |      str           |     UNIQUE         |
+--------------------+--------------------+--------------------+
|      QUER          |      str           |     NON-NULL       |
+--------------------+--------------------+--------------------+
**** The Report table stores all the complaints added by the users.
**** /Title/ is taken as the unique key, as a complaint once added need not be added once again.
***** The complaint can be further extended by adding comments to a particular complaint.
**** /Query/ is basically the description of the comment which the user wants to write.
*** Comments

+--------------------+--------------------+--------------------+
|      FIELD         |       TYPE         |     CONSTRAINT     |
+--------------------+--------------------+--------------------+
|      RID           |       int          |     NON-NULL       |
+--------------------+--------------------+--------------------+
|    USER ROLL       |       str          |     NON-NULL       |
+--------------------+--------------------+--------------------+
|     COMMENT        |       str          |     NON-NULL       |
+--------------------+--------------------+--------------------+
**** The /rid/ is the id of the complaint to which you want to add the comment.
**** /userRoll/ is the roll no of the user who has added the comment to the complaint.
**** /comment/ is the actual comment which the user wants to add to the complaint.
** Routes
*** /login
The =login= route is meant for an ordinary user i.e a student to login 
to the app.
- The route when accessed via GET method renders the template =login.html=
- The parameters rollno and password are submitted via POST method

*** /logout
The =logout= route clears the ongoing session i.e the current user logs out.
- This route can be accessed only via GET

*** /registerUser
The =registerUser= route is meant for user registration. Access is provided
once the user's registration form is approved by hostel admin.
- GET method access renders =adduser.html= template i.e the registration form.
- POST method is meant to submit the required information through the form.

*** /getAllUser
The =getAllUser= route can be accessed only via GET method. It returns the
list of all verified users.

*** /getAllRegUser
The =getAllRegUser= route can be accessed only via GET method. It returns the
list of students that have finished registration and are yet to be verified.

*** /<roll>
The =<roll>= route can be accesses only via GET method provided the user/admin is
logged in. It returns the student's data corresponding to the roll no <roll>.

*** /adlogin
The =adlogin= route is meant for an admin to login to the app. 
- The route when accessed via GET method renders the template =adlogin.html=
- The parameters email and password are submitted via POST method.

*** /addComplaint
The route =addComplaint= is meant for a verified user to post a complaint.
- The route when accessed via GET method renders the complaint form i.e =addComplaint.html=
- The parameters roll,title and the complaint are to be filled in the form and are
submitted through POST method.

*** /getAllComplaints
    The route =getAllComplaints= returns a list of all complaints, both resolved an unresolved.
** Completion/Error Representation
*** Whenever there is successful completion of something or error, there is a =flash message= on the screen.
*** To learn more about flash message, click [[https://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/FlashMessages/Index.html][here]].
* Deployment
** Deployed using =nginx= apache server
